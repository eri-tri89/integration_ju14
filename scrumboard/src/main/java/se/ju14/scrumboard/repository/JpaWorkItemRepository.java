package se.ju14.scrumboard.repository;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import se.ju14.scrumboard.model.Member;
import se.ju14.scrumboard.model.Team;
import se.ju14.scrumboard.model.WorkItem;
import se.ju14.scrumboard.model.status.ItemStatus;
import se.ju14.scrumboard.repository.action.WorkItemRepository;

/**
 * This Class executes the transactions that has to do with the WorkItem entity
 * @author Pierre Vanderpol, Jesper Wendler, Erik Perez
 *
 */
public final class JpaWorkItemRepository extends InMemoryRepository<WorkItem> implements WorkItemRepository {

	public JpaWorkItemRepository() {
		super();
	}

	@Override
	public WorkItem saveAndAssignToMember(Member member, WorkItem workItem) {
		super.saveOrUpdateEntity(manager -> {
			if (manager.find(Member.class, member.getId()) != null) {
				String AUTOGENERATED_ID = UUID.randomUUID().toString();
				workItem.setItemID(AUTOGENERATED_ID);
				member.getWorkItems().add(workItem);
				manager.persist(workItem);
				manager.merge(member);
			}
		});
		return workItem;
	}

	@Override
	public WorkItem changeStatus(WorkItem workItem, ItemStatus itemStatus) {
		super.saveOrUpdateEntity(manager -> {
			if (manager.find(WorkItem.class, workItem.getId()) != null) {
				workItem.setItemStatus(itemStatus);
				manager.merge(workItem);
			}
		});
		return workItem;
	}

	@Override
	public WorkItem delete(WorkItem workItem) {
		super.saveOrUpdateEntity(manager -> {
			if (manager.find(WorkItem.class, workItem.getId()) != null) {
				workItem.setItemStatus(ItemStatus.DELETED);
				manager.merge(workItem);
			}
		});
		return workItem;
	}

	@Override
	public List<WorkItem> getByTeam(Team team) {
		List<WorkItem> workItemList = new ArrayList<WorkItem>();
		List<Member> membersList = new ArrayList<Member>(team.getMembers());

		for (Member m : membersList) {
			Set<WorkItem> workItemListbyMember = m.getWorkItems();
			workItemList.addAll(workItemListbyMember);
		}
		return workItemList;

	}

	@Override
	public List<WorkItem> getByStatus(ItemStatus itemStatus) {
		return super.executeQuery("WorkItem.findByStatus", WorkItem.class, "itemStatus", itemStatus);
	}

	@Override
	public List<WorkItem> getByMember(Member member) {
		return new ArrayList<WorkItem>(member.getWorkItems());
	}

	@Override
	public List<WorkItem> getByWordFilter(String word) {
		List<WorkItem> allWorkItems = super.executeFindAll("WorkItem", WorkItem.class);
		List<WorkItem> resultList = new ArrayList<WorkItem>();

		for (WorkItem w : allWorkItems) {
			if (w.getSubject().contains(word) || w.getDescription().contains(word)) {
				resultList.add(w);
			}
		}
		return resultList;
	}

	@Override
	public List<WorkItem> getWorkItemsWithIssues() {
		List<WorkItem> allWorkItems = super.executeFindAll("WorkItem", WorkItem.class);
		List<WorkItem> resultList = new ArrayList<WorkItem>();

		for (WorkItem w : allWorkItems) {
			if (!w.getIssues().isEmpty()) {
				resultList.add(w);
			}
		}
		return resultList;
	}

	@Override
	public WorkItem getById(String itemID) {
		return super.executeQuery("WorkItem.findByID", WorkItem.class, "itemID", itemID).get(0);		
	}

}
