package se.ju14.scrumboard.repository;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import se.ju14.scrumboard.model.Member;
import se.ju14.scrumboard.model.Team;
import se.ju14.scrumboard.model.status.MemberStatus;
import se.ju14.scrumboard.repository.action.MemberRepository;

/**
 * This Class executes the transactions that has to do with the Member entity
 * @author Pierre Vanderpol, Jesper Wendler, Erik Perez
 *
 */
public final class JpaMemberRepository extends InMemoryRepository<Member> implements MemberRepository {

	public JpaMemberRepository() {
		super();
	}

	@Override
	public Member save(Member entity) {
		String AUTOGENERATED_ID = UUID.randomUUID().toString();
		super.saveOrUpdateEntity(manager -> {
			entity.setMemberId(AUTOGENERATED_ID);
			manager.persist(entity);
		});
		return entity;
	}

	@Override
	public Member update(Member entity) {
		super.saveOrUpdateEntity(manager -> {
			if (manager.find(Member.class, entity.getId()) != null)
				manager.merge(entity);
		});
		return entity;
	}

	@Override
	public Member delete(Member entity) {
		super.saveOrUpdateEntity(manager -> {
			if (manager.find(Member.class, entity.getId()) != null) {
				entity.setMemberStatus(MemberStatus.DELETED);
				manager.merge(entity);
			}
		});
		return entity;
	}

	@Override
	public List<Member> getAll() {
		return super.executeFindAll("Member", Member.class);
	}

	@Override
	public Member getById(String memberId) {
		return super.executeQuery("Member.findById", Member.class, "memberId", memberId).get(0);
	}

	@Override
	public List<Member> getByFirstName(String firstName) {
		return super.executeQuery("Member.findByFirstName", Member.class, "firstName", firstName);
	}

	@Override
	public List<Member> getByLastName(String lastName) {
		return super.executeQuery("Member.findByLastName", Member.class, "lastName", lastName);
	}

	@Override
	public Member getByUserName(String userName) {
		return super.executeQuery("Member.findByUserName", Member.class, "userName", userName).get(0);
	}

	@Override
	public List<Member> getTeamMembers(Team team) {
		return new ArrayList<Member>(team.getMembers());
	}

}
